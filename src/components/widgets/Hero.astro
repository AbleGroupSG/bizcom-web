---
import Image from "~/components/common/Image.astro";
import Button from "~/components/ui/Button.astro";
import type { CallToAction } from "~/types";

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any;
  videoSrc?: string; // Added videoSrc as a prop for the background video
}

const {
  id,
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline,
  content = await Astro.slots.render("content"),
  actions = await Astro.slots.render("actions"),
  image = await Astro.slots.render("image"),
  videoSrc,
} = Astro.props;
---

<section
style="margin-bottom: 150px; min-height: 70vh;"
  class="not-prose"
  {...id ? { id } : {}}
  
    >
  <div
    class="absolute inset-0 pointer-events-none"
    aria-hidden="true"
    style="
      position: absolute;
      width: 100%;
      left: 50%;
      top: 50%;
      height: 100%;
      object-fit: cover;
      transform: translate(-50%, -50%);
      z-index: -1;"
  >
    {videoSrc && (
      <video
        class="absolute w-full h-full object-cover"
        src={videoSrc}
        style="filter: blur(4px);"
        autoplay
        loop
        muted
      />
    )}
  </div>
  <div
    class="relative max-w-7xl mx-auto px-4 sm:px-6 z-10"
    style="margin-top: 5%;"
  >
    <div class="pt-0 md:pt-[76px]"></div>
    <div class="py-10 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {tagline && (
          <p
            class="text-base text-white text-secondary font-bold tracking-wide uppercase"
            set:html={tagline}
            data-i18n={tagline}
          />
        )}
        {title && (
          <h1
            class="text-5xl md:text-6xl font-bold leading-tighter text-white tracking-tighter mb-4 font-heading"
            data-i18n={title}
            set:html={title}
          />
        )}
        <div class="max-w-3xl mx-auto">
          {subtitle && (
            <div
              class="bg-primary dark:bg-dark p-1 mb-6"
              style="border-radius: 12px; opacity: 70%;"
            >
              <p
                class="text-xl text-white"
                set:html={subtitle}
                data-i18n={subtitle}
              />
            </div>
          )}
          {actions && (
            <div
              class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4"
            >
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )}
        </div>
        {content && <p class="text-white">{content}</p>}
      </div>
      <div>
        {image && (
          <div class="relative m-auto max-w-5xl">
            {typeof image === "string" ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="mx-auto rounded-md w-full"
                widths={[400, 768, 1024, 2040]}
                sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                loading="eager"
                width={1024}
                height={350}
                {...image}
              />
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</section>
